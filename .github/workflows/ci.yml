name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  # Job 1: TypeScript Build and Lint
  typescript-check:
    name: TypeScript Build & Lint
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint
        continue-on-error: true  # Don't fail the build on lint warnings

      - name: TypeScript compile check
        run: npx tsc --noEmit

      - name: Build TypeScript
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-output
          path: build/
          retention-days: 1

  # Job 2: R Package Verification
  r-check:
    name: R Package & Script Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup R
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: '4.3.2'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libcurl4-openssl-dev \
            libssl-dev \
            libxml2-dev \
            pandoc

      - name: Cache R packages
        uses: actions/cache@v3
        with:
          path: ${{ env.R_LIBS_USER }}
          key: ${{ runner.os }}-r-4.3.2-${{ hashFiles('scripts/install_packages.R') }}
          restore-keys: |
            ${{ runner.os }}-r-4.3.2-

      - name: Install R packages
        run: |
          Rscript -e "install.packages('remotes', repos='https://cloud.r-project.org/')"
          Rscript -e "remotes::install_cran(c('meta', 'metafor', 'jsonlite', 'ggplot2', 'rmarkdown', 'knitr'), repos='https://cloud.r-project.org/')"

      - name: Verify R packages
        run: |
          Rscript -e "library(meta); packageVersion('meta')"
          Rscript -e "library(metafor); packageVersion('metafor')"
          Rscript -e "library(jsonlite); packageVersion('jsonlite')"
          Rscript -e "library(ggplot2); packageVersion('ggplot2')"

      - name: Test R scripts syntax
        run: |
          for script in scripts/*.R; do
            echo "Checking $script..."
            Rscript -e "tryCatch(parse(file='$script'), error=function(e) {cat('ERROR in', '$script:', conditionMessage(e), '\n'); quit(status=1)})"
          done

      - name: Run R health check
        run: Rscript scripts/health_test.R
        continue-on-error: true

  # Job 3: Security Scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run npm audit
        run: |
          npm audit --audit-level=moderate || true

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
        continue-on-error: true

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
        continue-on-error: true

  # Job 4: Test Suite
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: [typescript-check, r-check]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Setup R
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: '4.3.2'

      - name: Install dependencies
        run: |
          npm ci
          sudo apt-get update
          sudo apt-get install -y libcurl4-openssl-dev libssl-dev libxml2-dev

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-output
          path: build/

      - name: Run JavaScript tests
        run: |
          node test-functions.js || true
          node test-security.js || true
        continue-on-error: true

      - name: Run demo workflow
        run: |
          node demo-workflow.js || true
        continue-on-error: true
        timeout-minutes: 5

  # Job 5: Docker Build
  docker:
    name: Docker Build & Push
    runs-on: ubuntu-latest
    needs: [typescript-check, r-check, test]
    if: success() && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKER_HUB_USERNAME }}/meta-analysis-mvp
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,prefix={{branch}}-

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        if: github.event_name != 'pull_request'
        run: |
          docker run --rm ${{ secrets.DOCKER_HUB_USERNAME }}/meta-analysis-mvp:latest node --version
          docker run --rm ${{ secrets.DOCKER_HUB_USERNAME }}/meta-analysis-mvp:latest Rscript -e "packageVersion('meta')"

  # Job 6: Summary Report
  summary:
    name: Pipeline Summary
    runs-on: ubuntu-latest
    needs: [typescript-check, r-check, security, test, docker]
    if: always()
    
    steps:
      - name: Generate Summary
        run: |
          echo "## 📊 CI/CD Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### Build Status:" >> $GITHUB_STEP_SUMMARY
          echo "- TypeScript: ${{ needs.typescript-check.result == 'success' && '✅' || '❌' }}" >> $GITHUB_STEP_SUMMARY
          echo "- R Packages: ${{ needs.r-check.result == 'success' && '✅' || '❌' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Security: ${{ needs.security.result == 'success' && '✅' || '⚠️' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Tests: ${{ needs.test.result == 'success' && '✅' || '⚠️' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Docker: ${{ needs.docker.result == 'success' && '✅' || (needs.docker.result == 'skipped' && '⏭️' || '❌') }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.docker.result }}" == "success" ]; then
            echo "### 🐳 Docker Image:" >> $GITHUB_STEP_SUMMARY
            echo "Image published to Docker Hub" >> $GITHUB_STEP_SUMMARY
            echo '```bash' >> $GITHUB_STEP_SUMMARY
            echo "docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/meta-analysis-mvp:latest" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi