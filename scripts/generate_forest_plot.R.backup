# generate_forest_plot.R

library(metafor)
library(ggplot2)

generate_forest_plot <- function(args) {
  session_path <- args$session_path
  
  # Load analysis results
  analysis_results_path <- file.path(session_path, "processing", "analysis_results.rds")
  if (!file.exists(analysis_results_path)) {
    stop("Analysis results not found. Please perform meta-analysis first.")
  }
  results <- readRDS(analysis_results_path)
  
  # Create output directory if it doesn't exist
  output_dir <- file.path(session_path, "output")
  if (!dir.exists(output_dir)) {
    dir.create(output_dir, recursive = TRUE)
  }
  
  # Set plot style
  plot_style <- args$plot_style
  if (is.null(plot_style)) {
    plot_style <- "classic"
  }
  
  # Set confidence level
  confidence_level <- args$confidence_level
  if (is.null(confidence_level)) {
    confidence_level <- 0.95
  }
  
  # Generate forest plot
  plot_path <- file.path(output_dir, "forest_plot.png")
  
  # Create the plot
  png(plot_path, width = 1200, height = 800, res = 100)
  
  tryCatch({
    if (plot_style == "modern") {
      # Create a modern ggplot2-based forest plot
      create_modern_forest_plot(results$model, confidence_level, args$custom_labels)
    } else {
      # Use classic metafor forest plot
      forest(results$model, 
             level = confidence_level * 100,
             xlab = get_effect_measure_label(results$model),
             slab = get_study_labels(results$model),
             cex = 1.2,
             cex.lab = 1.2,
             cex.axis = 1.1)
      
      # Add custom labels if provided
      if (!is.null(args$custom_labels)) {
        if (!is.null(args$custom_labels$title)) {
          title(main = args$custom_labels$title, cex.main = 1.4)
        }
      }
    }
    
    dev.off()
    
    # Also save as PDF for publication quality
    pdf_path <- file.path(output_dir, "forest_plot.pdf")
    pdf(pdf_path, width = 12, height = 8)
    
    if (plot_style == "modern") {
      create_modern_forest_plot(results$model, confidence_level, args$custom_labels)
    } else {
      forest(results$model, 
             level = confidence_level * 100,
             xlab = get_effect_measure_label(results$model),
             slab = get_study_labels(results$model),
             cex = 1.2,
             cex.lab = 1.2,
             cex.axis = 1.1)
      
      if (!is.null(args$custom_labels) && !is.null(args$custom_labels$title)) {
        title(main = args$custom_labels$title, cex.main = 1.4)
      }
    }
    
    dev.off()
    
    list(
      status = "success",
      plot_path = plot_path,
      pdf_path = pdf_path
    )
    
  }, error = function(e) {
    dev.off()  # Close any open device
    list(
      status = "error",
      message = paste("Failed to generate forest plot:", e$message)
    )
  })
}

# Helper function to get effect measure label
get_effect_measure_label <- function(model) {
  measure <- model$measure
  switch(measure,
    "OR" = "Odds Ratio",
    "RR" = "Risk Ratio",
    "MD" = "Mean Difference",
    "SMD" = "Standardized Mean Difference",
    "HR" = "Hazard Ratio",
    "Effect Size"
  )
}

# Helper function to get study labels
get_study_labels <- function(model) {
  if ("slab" %in% names(model)) {
    return(model$slab)
  } else if ("study" %in% names(model$data)) {
    return(model$data$study)
  } else {
    return(paste("Study", seq_len(model$k)))
  }
}

# Create modern forest plot using ggplot2
create_modern_forest_plot <- function(model, confidence_level, custom_labels) {
  # Extract data from model
  data <- data.frame(
    study = get_study_labels(model),
    estimate = as.numeric(model$yi),
    lower = model$yi - qnorm((1 + confidence_level) / 2) * sqrt(model$vi),
    upper = model$yi + qnorm((1 + confidence_level) / 2) * sqrt(model$vi),
    weight = 1 / model$vi
  )
  
  # Add overall effect
  overall <- data.frame(
    study = "Overall",
    estimate = as.numeric(model$beta),
    lower = model$ci.lb,
    upper = model$ci.ub,
    weight = sum(data$weight)
  )
  
  data <- rbind(data, overall)
  data$study <- factor(data$study, levels = rev(data$study))
  
  # Create plot
  p <- ggplot(data, aes(x = estimate, y = study)) +
    geom_point(aes(size = weight), shape = 15) +
    geom_errorbarh(aes(xmin = lower, xmax = upper), height = 0.2) +
    geom_vline(xintercept = 0, linetype = "dashed", alpha = 0.5) +
    geom_vline(xintercept = overall$estimate, linetype = "solid", color = "red", alpha = 0.7) +
    theme_bw() +
    theme(
      panel.grid.minor = element_blank(),
      text = element_text(size = 12)
    ) +
    xlab(get_effect_measure_label(model)) +
    ylab("Study") +
    scale_size_continuous(guide = "none")
  
  # Add custom labels if provided
  if (!is.null(custom_labels)) {
    if (!is.null(custom_labels$title)) {
      p <- p + ggtitle(custom_labels$title)
    }
    if (!is.null(custom_labels$xlab)) {
      p <- p + xlab(custom_labels$xlab)
    }
    if (!is.null(custom_labels$ylab)) {
      p <- p + ylab(custom_labels$ylab)
    }
  }
  
  print(p)
}